Import-Module $PSScriptRoot/../linux

function Get-NewickPath {
    return ConvertTo-LinuxPath -Path ([System.IO.Path]::Combine($PSScriptRoot, "newick"))
}

<#
 .SYNOPSIS
 Call Newick to obtain the RF distance between two trees given as newick files.

 .DESCRIPTION
 Calls Newick with two paths and returns and array of three values: The absolute RF distance, the maximum possible
 RF distance, and the relative RF distance between both trees. The paths may be native paths and will automatically
 converted to Linux-compatible paths. If the "File" parameter is set, it returns a triple of results for each pair
 of trees in the file, in upper-triangle matrix row-major order.

 .PARAMETER Tree1
 Path to a newick file containing one tree.

 .PARAMETER Tree2
 Path to a newick file containing one tree with the same number of taxa.

 .PARAMETER File
 Path to a newick file containing many trees, of which Newick calculates the pairwise RF distances.
#>
function Get-RFDistance {
    param(
        [Parameter(Mandatory, ParameterSetName="TwoTrees")]
        [string] $Tree1,

        [Parameter(Mandatory, ParameterSetName="TwoTrees")]
        [string] $Tree2,

        [Parameter(Mandatory, ParameterSetName="ManyTrees")]
        [string] $File
    )
    $all_outputs = $null

    if ($Tree1 -ne "") {
        $t1 = ConvertTo-LinuxPath -Path $Tree1
        $t2 = ConvertTo-LinuxPath -Path $Tree2

        $all_outputs = ((Invoke-OnLinux -Path (Get-NewickPath) -rofo $t1 -tree2 $t2) 2>&1) | ?{ $_ -is [System.Management.Automation.ErrorRecord] }
    } else {
        $trees = ConvertTo-LinuxPath -Path $File
        $all_outputs = ((((Invoke-OnLinux -Path (Get-NewickPath) -rofos $trees) 2>&1) | ?{ $_ -is [System.Management.Automation.ErrorRecord] }) -split "`n") | select -Skip 1
    }

    $all_outputs | % {
        if ($_ -match "^RF = (\d+) / (\d+), (\-?\d+(\.\d+)?)") {
            [PSCustomObject]@{
                RF = $Matches[1]
                Max = $Matches[2]
                Relative = $Matches[3]
            }
        }
    }
}

<#
 .SYNOPSIS
 Call Newick to convert a newick tree file into a tab-separated tree file.

 .DESCRIPTION
 Newick internally uses a tree format using tab separated lines describing edges. This command converts a standard
 Newick file into this tab-separated format.

 .PARAMETER Tree
 Path to a newick file containing a tree.

 .PARAMETER OutputFile
 Path where to store the tab separated file.
#>
function Convert-TreeToTsv {
    param(
        [Parameter(Mandatory = $true)]
        [string] $Tree,

        [Parameter(Mandatory = $true)]
        [string] $OutputFile
    )

    Invoke-OnLinux -Path (Get-NewickPath) -newick2tsv (ConvertTo-LinuxPath $Tree) -output (ConvertTo-LinuxPath $OutputFile)
}

<#
 .SYNOPSIS
 Extract all labels from a tab-separated tree file.

 .DESCRIPTION
 Newick internally uses a tree format using tab separated lines describing edges. This command extracts all node
 labels from such a file. To convert a Newick tree into a tab-separated file, use `Convert-TreeToTsv`

 .PARAMETER Tree
 Path to a tsv file generated by Newick, containing a tree.
#>
function Get-NodeLabels {
    param(
        [Parameter(Mandatory = $true)]
        [string] $Tree
    )

    $Labels = @(Get-Content -Path $Tree |
            Select-Object -Skip 3 |
            ConvertFrom-Csv -Delimiter "`t" -Header Id, Parent, BranchLen, Label |
            ForEach-Object { if ($null -ne $_.Label) { $_.Label } })

    Return $Labels
}

<#
 .SYNOPSIS
 Computes the phylogenetic accuracy of a tree compared with taxonomic features.

 .DESCRIPTION
 Invokes the `-tax` option of the Newick tool to compute an accuracy score for a given tree (in TSV format).
 The accuracy refers to a taxonomic feature table, which is a tab-separated file containing leaf labels in the
 first column, and the corresponding taxonomic rank of interest in the second column. The TSV file must not have a
 header line.

 .PARAMETER Tree
 Path to a tsv file generated by Newick, containing a tree.

 .PARAMETER FeatureFile
 Path to a tsv file, containing two columns, the first containing leaf labels, the second a taxonomic rank for each
 leaf.

 .PARAMETER OutputFile
 Path to the fev file which contains the accuracy values for all nodes and the tree.
#>
function Get-TaxonomicAccuracy {
    param(
        [Parameter(Mandatory = $true)]
        [string] $Tree,

        [Parameter(Mandatory = $true)]
        [string] $FeatureFile,

        [Parameter(Mandatory = $true)]
        [string] $OutputFile
    )

    ConvertTo-UnixLineEnding -Path $FeatureFile -Encoding 'ascii'
    Invoke-OnLinux (Get-NewickPath) -tax (ConvertTo-LinuxPath $Tree) -features (ConvertTo-LinuxPath $FeatureFile) -fevout (ConvertTo-LinuxPath $OutputFile)
}

Export-ModuleMember -Function Get-RFDistance
Export-ModuleMember -Function Convert-TreeToTsv
Export-ModuleMember -Function Get-NodeLabels
Export-ModuleMember -Function Get-TaxonomicAccuracy