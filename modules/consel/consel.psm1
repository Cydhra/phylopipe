using module ..\util

class Consel {
    static [string] wsl_makermt_path() {
        return [Util]::wsl_path([System.IO.Path]::Combine($PSScriptRoot, "bin", "makermt"))
    }

    static [string] wsl_consel_path() {
        return [Util]::wsl_path([System.IO.Path]::Combine($PSScriptRoot, "bin", "consel"))
    }

    static [string] wsl_catpv_path() {
        return [Util]::wsl_path([System.IO.Path]::Combine($PSScriptRoot, "bin", "catpv"))
    }

    # Make the RMT file that consel uses to assessing the tree confidence.
    # Parameters:
    #   $sitelh_file: The site likelihood file generated by RAxML
    #   output_file: The file name for the output file (will create a rmt file)
    # Returns:
    #   The path to the RMT file (i.e., $prefix.rmt)
    static [void] make_rmt([string]$sitelh_file, [string]$output_file) {
        $wsl_sitelh_file = [Util]::wsl_path($sitelh_file)
        $wsl_output = [Util]::wsl_path($output_file)
        $wsl_makermt_path = [Consel]::wsl_makermt_path()
        wsl $wsl_makermt_path --puzzle $wsl_sitelh_file $wsl_output
    }

    # Run consel to assess the tree confidence.
    #
    # Parameters:
    #   $rmt_file: The RMT file generated by the make_rmt function
    #   prefix: The output file name (will create a pv file)
    static [void] run_consel([string]$rmt_file, [string]$output_file) {
        $wsl_rmt_file = [Util]::wsl_path($rmt_file)
        $wsl_output = [Util]::wsl_path($output_file)
        $wsl_consel_path = [Consel]::wsl_consel_path()
        wsl $wsl_consel_path $wsl_rmt_file "$wsl_output.1"
    }

    # Convert the PV file generated by consel to a TSV file.
    static [void] convert_pv_to_tsv([string]$pv_file, [string]$tsv_file)
    {
        $wsl_pv_file = [Util]::wsl_path($pv_file)
        $wsl_catpv_path = [Consel]::wsl_catpv_path()

        (wsl $wsl_catpv_path $wsl_pv_file) # TODO: parse the output which is space-aligned instead of tab-separated
    }
}